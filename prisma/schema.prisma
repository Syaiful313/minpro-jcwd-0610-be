generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  fullName        String
  email           String         @unique
  password        String
  role            Role           @default(USER)
  bio             String?
  profilePicture  String?
  point           Int            @default(0)
  expirationDate  DateTime?
  referralCode    String         @unique
  referredBy      Int?
  referee         User?          @relation("ReferralRelation", fields: [referredBy], references: [id])
  referrals       User[]         @relation("ReferralRelation")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  events          Event[]
  transactions    Transaction[]
  vouchers        Voucher[]
  coupons         Coupon[]
  reviews         Review[]
  referralBonuses Referral[]
  notifications   Notification[]
  organizer       Organizer?

  @@map("users")
}

enum Role {
  ADMIN
  USER
  ORGANIZER
}

model Event {
  id           Int           @id @default(autoincrement())
  organizerId  Int
  organizer    Organizer     @relation(fields: [organizerId], references: [id])
  slug         String
  name         String
  thumbnail    String
  category     Category
  location     Location
  description  String
  startDate    DateTime
  endDate      DateTime
  deletedAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  vouchers     Voucher[]
  reviews      Review[]
  ticketTypes  TicketType[]
  User         User?         @relation(fields: [userId], references: [id])
  userId       Int?

  @@map("events")
}

enum Category {
  Sports
  Festivals
  Concerts
  Theater
}

enum Location {
  ACEH
  SUMATERA_UTARA
  SUMATERA_BARAT
  RIAU
  JAMBI
  SUMATERA_SELATAN
  BENGKULU
  LAMPUNG
  KEPULAUAN_BANGKA_BELITUNG
  KEPULAUAN_RIAU
  DKI_JAKARTA
  JAWA_BARAT
  JAWA_TENGAH
  DI_YOGYAKARTA
  JAWA_TIMUR
  BANTEN
  BALI
  NUSA_TENGGARA_BARAT
  NUSA_TENGGARA_TIMUR
  KALIMANTAN_BARAT
  KALIMANTAN_TENGAH
  KALIMANTAN_SELATAN
  KALIMANTAN_TIMUR
  KALIMANTAN_UTARA
  SULAWESI_UTARA
  SULAWESI_TENGAH
  SULAWESI_SELATAN
  SULAWESI_TENGGARA
  GORONTALO
  SULAWESI_BARAT
  MALUKU
  MALUKU_UTARA
  PAPUA
  PAPUA_BARAT
  PAPUA_TENGAH
  PAPUA_PEGUNUNGAN
  PAPUA_SELATAN
  PAPUA_BARAT_DAYA
}

model TicketType {
  id           Int           @id @default(autoincrement())
  eventId      Int
  event        Event         @relation(fields: [eventId], references: [id])
  name         String
  description  String?
  price        Int
  quantity     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("ticket_types")
}

model Transaction {
  id              Int               @id @default(autoincrement())
  userId          Int
  user            User              @relation(fields: [userId], references: [id])
  eventId         Int
  event           Event             @relation(fields: [eventId], references: [id])
  ticketTypeId    Int?
  ticketType      TicketType?       @relation(fields: [ticketTypeId], references: [id])
  quantity        Int
  totalPrice      Int
  usedPoint       Boolean           @default(false)
  pointAmount     Int               @default(0)
  usedVoucherCode String?
  paymentProofUrl String
  status          TransactionStatus
  expiredAt       DateTime?
  acceptedAt      DateTime?
  deletedAt       DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("transactions")
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

model Voucher {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  eventId    Int
  event      Event    @relation(fields: [eventId], references: [id])
  code       String   @unique
  discount   Int
  maxUsage   Int
  usageCount Int      @default(0)
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("vouchers")
}

model Coupon {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  code           String
  amount         Int
  discount       Int
  expirationDate DateTime
  isUsed         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("coupons")
}

model Review {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  review    String?
  createdAt DateTime @default(now())

  @@map("reviews")
}

model Referral {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  pointsAwarded  Int
  discountCoupon String?
  isRedeemed     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("referrals")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  message   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notifications")
}

enum NotificationType {
  TRANSACTION
  PROMOTION
  INFORMATION
}

model Organizer {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  user           User      @relation(fields: [userId], references: [id])
  npwp           String
  companyName    String
  companyWebsite String
  companyAddress String
  details        String
  acceptedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  events         Event[]

  @@map("organizers")
}
